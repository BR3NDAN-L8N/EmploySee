{"version":3,"sources":["components/TableSort.js","components/TableLayout.js","components/TableSortButtonRender.js","components/Table.js","App.js","index.js"],"names":["sortTable","props","sortRows","rowArray","sortBy","isReverse","newArray","teamOne","filter","row","teamTwo","sortedTeamOne","sortedTeamTwo","forEach","element","push","sort","a","b","localeCompare","reverse","rows","TableLayout","TableBody","SortTable","rowsArray","map","TableRow","key","email","TableCell","component","scope","firstName","align","lastName","title","teamNumber","RenderSortButton","onClick","handleArrowChange","id","data-arrow-direction","arrowDirection","RenderTable","state","firstNameButton","lastNameButton","titleButton","teamNumberButton","filterBy","tableSortBy","data","stateArray","Object","entries","handleFilterInput","event","value","target","setState","filterRows","refreshRows","arrowChange","name","direction","keyValuePair","console","log","handleRows","placeholder","this","onChange","type","TableContainer","Paper","Table","aria-label","TableHead","React","Component","App","className","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.251ace6c.chunk.js","sourcesContent":["const sortTable = (props) => {\n\n    const sortRows = (rowArray, sortBy, isReverse) => {\n\n        let newArray;\n\n        if (sortBy === \"teamNumber\") {\n            const teamOne = rowArray.filter(row => row[sortBy] === 1);\n            const teamTwo = rowArray.filter(row => row[sortBy] === 2);\n            const sortedTeamOne = sortRows(teamOne, \"firstName\");\n            const sortedTeamTwo = sortRows(teamTwo, \"firstName\");\n            newArray = sortedTeamOne;\n            sortedTeamTwo.forEach(element => {\n                newArray.push(element);\n            });\n        } else {\n            newArray = rowArray.sort((a, b) => a[sortBy].localeCompare(b[sortBy], 'en', { 'sensitivity': 'base' }));\n        }\n\n        if (isReverse) {\n            newArray = newArray.reverse();\n        }\n        return newArray;\n    };\n\n    return sortRows(props.rows, props.sortBy, props.isReverse)\n\n}\n\nexport default sortTable;","import React from 'react';\n\n// MATERIAL-UI imports\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\n\n// CUSTOM FILES import\nimport SortTable from './TableSort';\n\nconst TableLayout = (props) => {\n\n    const rowsArray = (props) => {\n        return SortTable(props);\n    }\n\n        return (\n            <TableBody>\n                {rowsArray(props).map((row) => (\n                    <TableRow key={row.email}>\n                        <TableCell component=\"th\" scope=\"row\">\n                            {row.firstName}\n                        </TableCell>\n                        <TableCell align=\"right\">{row.lastName}</TableCell>\n                        <TableCell align=\"right\">{row.title}</TableCell>\n                        <TableCell align=\"right\">{row.email}</TableCell>\n                        <TableCell align=\"right\">{row.teamNumber}</TableCell>\n                    </TableRow>\n                ))}\n            </TableBody>\n        );\n\n};\n\nexport default TableLayout;\n","import React from 'react';\nimport ExpandMoreSharpIcon from '@material-ui/icons/ExpandMoreSharp';\nimport ExpandLessSharpIcon from '@material-ui/icons/ExpandLessSharp';\n\nconst RenderSortButton = (props) => {\n\n    // const properties = `onClick=${props.handleArrowChange} id=${props.id} data-arrow-direction=${props.arrowDirection}`\n\n    return (\n        <button onClick={props.handleArrowChange} id={props.id} data-arrow-direction={props.arrowDirection}>\n            {props.arrowDirection === \"up\" ? <ExpandLessSharpIcon onClick={props.handleArrowChange} id={props.id} data-arrow-direction={props.arrowDirection}/> : <ExpandMoreSharpIcon onClick={props.handleArrowChange} id={props.id} data-arrow-direction={props.arrowDirection} />}\n        </button>\n    )\n}\n\n\nexport default RenderSortButton;","import React from 'react';\n\n// MATERIAL-UI imports\n// import { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n// CUSTOM FILES import\nimport TableLayout from './TableLayout';\nimport RenderSortButton from './TableSortButtonRender';\nimport data from \"./data.json\";\n\nexport default class RenderTable extends React.Component {\n    state = {\n        firstNameButton: \"up\",\n        lastNameButton: \"up\",\n        titleButton: \"up\",\n        teamNumberButton: \"down\",\n        filterBy: \"\",\n        tableSortBy: \"teamNumber\",\n        isReverse: false,\n        rows: data,\n    };\n\n    stateArray = () => {\n        //  Convert the React state into an array\n        let stateArray = Object.entries(this.state);\n        return stateArray;\n    };\n\n    handleFilterInput = (event) => {\n        // Getting the value and name of the input which triggered the change\n        let value = event.target.value;\n\n\n        // Updating the input's state\n        this.setState({\n            filterBy: value\n        });\n    };\n\n    filterRows = () => {\n        // let newRows;\n        if (this.state.filterBy !== \"\") {\n            this.setState({\n                rows: this.state.rows.filter(row => row.title === this.state.filterBy)\n            });\n        }\n    }\n\n    refreshRows = () => {\n        this.setState({\n            rows: data\n        });\n    };\n\n    arrowChange = (event) => {\n        this.state.tableSortBy = event.target.id;\n        const name = `${event.target.id}Button`;\n        const direction = this.state[`${event.target.id}Button`];\n        const key = 0;\n        const value = 1;\n\n        // turn all arrows up for a default position\n        this.stateArray().forEach(keyValuePair => {\n            if (keyValuePair[value] === \"down\") {\n                this.setState({\n                    [keyValuePair[key]]: \"up\"\n                });\n            }\n        });\n\n        //  change the arrow of the button clicked\n        if (direction === \"down\") {\n            this.setState({\n                [name]: \"up\",\n                isReverse: true\n            });\n        } else if (direction === \"up\") {\n            this.setState({\n                [name]: \"down\",\n                isReverse: false\n            });\n        } else {\n            console.log(`problem with direction's var value ... this \"${this.state.tableSortBy}\" has a value of \"${direction}\"`);\n        }\n\n        return event.target.arrowDirection = this.state[this.state.tableSortBy];\n\n    }\n\n    handleRows = () => {\n        // return this.state.filterBy !== \"\" ? this.state.rows : this.state.filteredRows;\n        return this.state.rows;\n    }\n\n    render() {\n        return (\n            <div>\n                <input\n                    placeholder={\"Filter by job title\"}\n                    value={this.state.filterBy}\n                    onChange={this.handleFilterInput}\n                ></input>\n                <button\n                    type={'button'}\n                    onClick={this.filterRows}\n                >Filter</button>\n                <button\n                    type={'button'}\n                    onClick={this.refreshRows}\n                >Refresh</button>\n                <TableContainer component={Paper}>\n                    <Table aria-label=\"employee table\">\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>First Name<RenderSortButton\n                                    id={\"firstName\"}\n                                    arrowDirection={this.state.firstNameButton}\n                                    handleArrowChange={this.arrowChange}\n                                />\n                                </TableCell>\n                                <TableCell align=\"right\">Last Name<RenderSortButton\n                                    id={\"lastName\"}\n                                    arrowDirection={this.state.lastNameButton}\n                                    handleArrowChange={this.arrowChange}\n                                />\n                                </TableCell>\n                                <TableCell align=\"right\">Title<RenderSortButton\n                                    id={\"title\"}\n                                    arrowDirection={this.state.titleButton}\n                                    handleArrowChange={this.arrowChange}\n                                />\n                                </TableCell>\n                                <TableCell align=\"right\">Email\n                                </TableCell>\n                                <TableCell align=\"right\">Team Number<RenderSortButton\n                                    id={\"teamNumber\"}\n                                    arrowDirection={this.state.teamNumberButton}\n                                    handleArrowChange={this.arrowChange}\n                                />\n                                </TableCell>\n                            </TableRow>\n                        </TableHead>\n\n                        <TableLayout\n                            sortBy={this.state.tableSortBy}\n                            isReverse={this.state.isReverse}\n                            rows={this.state.rows}\n                        />\n\n                    </Table>\n                </TableContainer>\n            </div>\n        );\n    }\n};","import React from 'react';\n\nimport RenderTable from './components/Table';\n\nconst App = () => {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <h1>\n                    EmploySee\n                </h1>\n                <h2>\n                    The easy way to see employees.\n                </h2>\n            </header>\n            <main>\n                <RenderTable />\n            </main>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './App';\n// import * as serviceWorker from './serviceWorker';\n\n// ReactDOM.render(\n// //   <React.StrictMode>\n//     <App />,\n// //   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}